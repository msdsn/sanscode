# Generated by Django 5.0.7 on 2024-08-13 17:47

import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import uuid
import wagtail.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('blogpage', '0001_initial'),
        ('images', '0001_initial'),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        ('wagtailcore', '0094_alter_page_locale'),
    ]

    operations = [
        migrations.CreateModel(
            name='Subscribe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=100)),
            ],
        ),
        migrations.AddField(
            model_name='blogdetail',
            name='cta_url_four',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='blogpage.blogdetail'),
        ),
        migrations.AddField(
            model_name='blogdetail',
            name='cta_url_one',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='blogpage.blogdetail'),
        ),
        migrations.AddField(
            model_name='blogdetail',
            name='cta_url_three',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='blogpage.blogdetail'),
        ),
        migrations.AddField(
            model_name='blogdetail',
            name='cta_url_two',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='blogpage.blogdetail'),
        ),
        migrations.AlterField(
            model_name='blogdetail',
            name='body',
            field=wagtail.fields.StreamField([('rich_text', 0), ('text', 1), ('document', 2), ('page', 3), ('info', 4), ('faq', 5), ('carousel', 9), ('image', 10), ('embed', 11), ('code', 14), ('blockquote', 15), ('quotation', 17), ('call_to_action_1', 21)], blank=True, block_lookup={0: ('wagtail.blocks.RichTextBlock', (), {}), 1: ('blocks.blocks.TextBlock', (), {}), 2: ('wagtail.documents.blocks.DocumentChooserBlock', (), {}), 3: ('wagtail.blocks.PageChooserBlock', (), {'required': False}), 4: ('blocks.blocks.InfoBlock', (), {}), 5: ('blocks.blocks.FAQListBlock', (), {}), 6: ('wagtail.images.blocks.ImageChooserBlock', (), {}), 7: ('wagtail.blocks.TextBlock', (), {}), 8: ('wagtail.blocks.StructBlock', [[('text', 7), ('author', 7)]], {}), 9: ('wagtail.blocks.StreamBlock', [[('image', 6), ('quotation', 8)]], {}), 10: ('blocks.blocks.ImageBlock', (), {}), 11: ('wagtail.embeds.blocks.EmbedBlock', (), {}), 12: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('bash', 'Bash/Shell'), ('css', 'CSS'), ('diff', 'diff'), ('html', 'HTML'), ('javascript', 'Javascript'), ('json', 'JSON'), ('python', 'Python'), ('scss', 'SCSS'), ('yaml', 'YAML')], 'help_text': 'Coding language', 'identifier': 'language', 'label': 'Language'}), 13: ('wagtail.blocks.TextBlock', (), {'identifier': 'code', 'label': 'Code'}), 14: ('wagtail.blocks.StructBlock', [[('language', 12), ('code', 13)]], {}), 15: ('wagtail.blocks.BlockQuoteBlock', (), {}), 16: ('wagtail.blocks.TextBlock', (), {'required': False}), 17: ('wagtail.blocks.StructBlock', [[('quote', 0), ('cite', 16)]], {'icon': 'openquote', 'template': 'blocks/blockquote.html'}), 18: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic'], 'required': True}), 19: ('wagtail.blocks.PageChooserBlock', (), {}), 20: ('wagtail.blocks.CharBlock', (), {'max_length': 100, 'required': False}), 21: ('wagtail.blocks.StructBlock', [[('text', 18), ('page', 19), ('button_text', 20)]], {})}, null=True),
        ),
        migrations.CreateModel(
            name='BlogAuthor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('translation_key', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.CharField(max_length=100)),
                ('website', models.EmailField(max_length=100)),
                ('bio', models.TextField(default='Bio', max_length=300)),
                ('x', models.CharField(blank=True, max_length=100, null=True)),
                ('facebook', models.CharField(blank=True, max_length=100, null=True)),
                ('linkedin', models.CharField(blank=True, max_length=100, null=True)),
                ('github', models.CharField(blank=True, max_length=100, null=True)),
                ('behance', models.CharField(blank=True, max_length=100, null=True)),
                ('dribbble', models.CharField(blank=True, max_length=100, null=True)),
                ('instagram', models.CharField(blank=True, max_length=100, null=True)),
                ('slug', models.SlugField(blank=True, max_length=100, null=True)),
                ('url', models.CharField(blank=True, max_length=100, null=True)),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage')),
                ('locale', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='wagtailcore.locale', verbose_name='locale')),
            ],
            options={
                'verbose_name': 'Author',
                'verbose_name_plural': 'Authors',
                'abstract': False,
                'unique_together': {('translation_key', 'locale')},
            },
        ),
        migrations.CreateModel(
            name='BlogCategories',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(blank=True, max_length=100, null=True)),
                ('url', models.CharField(blank=True, max_length=100, null=True)),
                ('category_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage')),
            ],
        ),
        migrations.CreateModel(
            name='BlogDetailAuthorPlacement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='blogpage.blogauthor')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='author_placement', to='blogpage.blogdetail')),
            ],
        ),
        migrations.CreateModel(
            name='BlogDetailCategoriesPlacement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='blogpage.blogcategories')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories_placement', to='blogpage.blogdetail')),
            ],
        ),
        migrations.CreateModel(
            name='BlogPageTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(blank=True, max_length=100, null=True)),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='blogpage.blogdetail')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='blogdetail',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='blogpage.BlogPageTag', to='taggit.Tag', verbose_name='Tags'),
        ),
    ]
